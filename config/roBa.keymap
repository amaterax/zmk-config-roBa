#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100
#define MOUSE 4
#define SCROLL 5

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q         &kp W         &kp E               &kp R             &kp T                                                      &kp Y        &kp U  &lt 5 I    &kp O    &kp P
&kp A         &kp S         &lt_to_layer_0 3 D  &kp F             &kp G   &kp TAB                         &kp ESC            &kp H        &kp J  &kp K      &kp L    &kp ENTER
&kp Z         &kp X         &kp C               &kp V             &kp B   &lt_to_layer_0 6 SEMICOLON      &kp QUESTION       &kp N        &kp M  &kp COMMA  &kp DOT  &kp BACKSPACE
&kp LEFT_ALT  &kp LEFT_ALT  &kp LEFT_ALT        &kp LEFT_CONTROL  &tog 1  &kp LEFT_SHIFT                  &kp RIGHT_COMMAND  &lt 2 SPACE                             &lt 5 CAPSLOCK
            >;
        };

        FUNCTION {
            bindings = <
&kp LS(N1)  &kp LS(N2)  &kp LS(N3)  &kp LS(N4)         &kp LS(N5)                            &kp MINUS       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PIPE       &kp EQUAL
&kp SEMI    &kp COLON   &kp APOS    &kp DOUBLE_QUOTES  &kp GRAVE   &trans      &kp ASTERISK  &kp UNDERSCORE  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp SLASH      &trans
&kp LS(N6)  &kp LS(N7)  &kp LS(N8)  &kp LS(N9)         &kp LS(N0)  &trans      &kp FSLH      &kp PLUS        &kp LBKT              &kp RBKT               &kp BACKSLASH  &trans
&trans      &trans      &trans      &trans             &trans      &trans      &trans        &trans                                                                      &trans
            >;
        };

        NUM {
            bindings = <
&kp F11  &kp F12  &kp F13  &kp F14  &kp F15                            &kp MINUS     &kp N7  &kp N8  &kp N9  &kp EQUAL
&kp F6   &kp F7   &kp F8   &kp F9   &kp F10  &trans      &kp ASTERISK  &kp NUMBER_0  &kp N4  &kp N5  &kp N6  &trans
&kp F1   &kp F2   &kp F3   &kp F4   &kp F5   &trans      &kp FSLH      &kp PLUS      &kp N1  &kp N2  &kp N3  &trans
&trans   &trans   &trans   &trans   &trans   &trans      &trans        &trans                                &trans
            >;
        };

        ARROW {
            bindings = <
&trans  &kp LEFT_CONTROL  &trans  &kp LC(A)  &kp LC(E)                        &kp LC(A)     &kp HOME      &kp UP      &kp END        &kp LC(E)
&trans  &kp LEFT_SHIFT    &trans  &mkp MB1   &mkp MB2   &mkp MB3      &trans  &kp LEFT      &kp LEFT      &kp DOWN    &kp RIGHT      &trans
&trans  &kp LEFT_COMMAND  &trans  &mkp MB4   &mkp MB5   &mkp MB3      &trans  &kp LC(LEFT)  &kp LC(LEFT)  &kp LC(UP)  &kp LC(RIGHT)  &trans
&trans  &trans            &trans  &trans     &trans     &trans        &trans  &trans                                                 &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &kp LC(A)  &mkp MB3  &kp LC(E)  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1   &mkp MB3  &mkp MB2   &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB4   &mkp MB3  &mkp MB5   &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                  &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
